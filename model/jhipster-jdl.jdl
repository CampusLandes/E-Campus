// add audit
entity Event {
    title String required,
    desc String,
    completionDate Instant,
    status EventStatus required
}

entity EventType {
    name String required
}

entity Localisation {
    name String required,
    localisation String required
    gpsPosition String
}

// add audit
entity Invitation {
    message String,
    status InvitationStatus required
}

// add audit
entity Trip {
    creationDate Instant required,
    departureDate Instant
}

// add audit
entity TripEvaluation {
    note Integer required,
    comment String,
    type UserType required
}

// add audit
entity Conversation {
    name String required,
    type ConversationType required,
    policyType ConversationPolicyType required
}

// add audit
entity Message {
    message String required
}

entity Vehicle {
    type String required,
    nbPlace Integer required,
    bagage String,
    trunkVolume Integer,
    smoking Boolean
}

enum InvitationStatus {
    WAIT,ACCEPT,REFUSE
}

enum EventStatus {
    PRIVATE, PUBLIC
}

enum ConversationType {
    GROUP,SINGLE
}

enum ConversationPolicyType {
    PRIVATE, PUBLIC
}

enum UserType {
    CONDUCTOR, PASSENGER
}

relationship OneToOne {
    User{vehicle(type)} to Vehicle
}

relationship OneToMany {
    Event{type(name) required} to EventType,
    Event{localisation(name) required} to Localisation,
    Event{responsible(login) required} to User,
    Trip{startLocalisation(name)} to Localisation,
    Trip{endLocalisation(name)} to Localisation,
    Trip{driver(login)} to User,
    TripEvaluation{evaluated(login)} to User,
    TripEvaluation{assessor(login)} to User,
    Invitation{event(title)} to Event,
    Invitation{user(login)} to User,
    Conversation{creator(login)} to User
}

relationship ManyToOne {
    Conversation{message} to Message
}

relationship ManyToMany {
    Event{participants(login)} to User,
    Trip{passenger(login)} to User,
    Conversation{participants(login)} to User,
    Message{sawPeople(login)} to User
}

paginate * with infinite-scroll
paginate * with pagination

// Use Data Transfert Objects (DTO)
dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
